{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/karenrogers/personal-projects/NextJS/nextjs-meetups/pages/[meetupId]/index.js\";\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetails = () => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\n    title: 'First Meetup',\n    address: 'Some address 5, 12345 some city',\n    description: 'this is a first meetup!'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}; //special function you need to export in a page comp if it's a dynamic page (id in the url for ex) and you're using getStaticProps. This is needed because since the page is pre-generated (during build, not when the user visits the page), next needs to know the dynamic content ir order to pre-generate it.\n\n\nexport async function getStaticPaths() {\n  return {\n    // fallback: false means we include all dynamic paths ourselves and if a user enters one that doesn't exist, the server wont try to generate a page to display but will show a 404 error\n    fallback: false,\n    //must have path key that's a []\n    paths: [//include 1 {} per each version of this dynamic page\n    {\n      params: {\n        //dynamic values here\n        meetupId: 'm1'\n      }\n    }, {\n      params: {\n        //dynamic values here\n        meetupId: 'm2'\n      }\n    }]\n  };\n} //you can't use hooks inside getStaticProps, so instead of useRouter, use the context {} parameter to access the params key (built in) and the dynamic values encoded in the url (meetupId --> name of our folder in the sq. brackets)\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  console.log(meetupId); //fetch data for a single meetup\n\n  return {\n    props: {\n      meetupData: {\n        image: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\n        id: meetupId,\n        title: 'First Meetup',\n        address: 'Some address 5, 12345 some city',\n        description: 'this is a first meetup!'\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/karenrogers/personal-projects/NextJS/nextjs-meetups/pages/[meetupId]/index.js"],"names":["MeetupDetail","MeetupDetails","getStaticPaths","fallback","paths","params","meetupId","getStaticProps","context","console","log","props","meetupData","image","id","title","address","description"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EACH,wHAFJ;AAIE,IAAA,KAAK,EAAE,cAJT;AAKE,IAAA,OAAO,EAAE,iCALX;AAME,IAAA,WAAW,EAAE;AANf;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAXD,C,CAaA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC,SAAO;AACL;AACAC,IAAAA,QAAQ,EAAE,KAFL;AAGL;AACAC,IAAAA,KAAK,EAAE,CACL;AACA;AACEC,MAAAA,MAAM,EAAE;AACN;AACAC,QAAAA,QAAQ,EAAE;AAFJ;AADV,KAFK,EAQL;AACED,MAAAA,MAAM,EAAE;AACN;AACAC,QAAAA,QAAQ,EAAE;AAFJ;AADV,KARK;AAJF,GAAP;AAoBD,C,CAED;;AACA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMF,QAAQ,GAAGE,OAAO,CAACH,MAAR,CAAeC,QAAhC;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EAH4C,CAK5C;;AACA,SAAO;AACLK,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EACH,wHAFQ;AAGVC,QAAAA,EAAE,EAAER,QAHM;AAIVS,QAAAA,KAAK,EAAE,cAJG;AAKVC,QAAAA,OAAO,EAAE,iCALC;AAMVC,QAAAA,WAAW,EAAE;AANH;AADP;AADF,GAAP;AAYD;AAED,eAAehB,aAAf","sourcesContent":["import MeetupDetail from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetails = () => {\n  return (\n    <MeetupDetail\n      image={\n        'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg'\n      }\n      title={'First Meetup'}\n      address={'Some address 5, 12345 some city'}\n      description={'this is a first meetup!'}\n    />\n  );\n};\n\n//special function you need to export in a page comp if it's a dynamic page (id in the url for ex) and you're using getStaticProps. This is needed because since the page is pre-generated (during build, not when the user visits the page), next needs to know the dynamic content ir order to pre-generate it.\nexport async function getStaticPaths() {\n  return {\n    // fallback: false means we include all dynamic paths ourselves and if a user enters one that doesn't exist, the server wont try to generate a page to display but will show a 404 error\n    fallback: false,\n    //must have path key that's a []\n    paths: [\n      //include 1 {} per each version of this dynamic page\n      {\n        params: {\n          //dynamic values here\n          meetupId: 'm1'\n        }\n      },\n      {\n        params: {\n          //dynamic values here\n          meetupId: 'm2'\n        }\n      }\n    ]\n  };\n}\n\n//you can't use hooks inside getStaticProps, so instead of useRouter, use the context {} parameter to access the params key (built in) and the dynamic values encoded in the url (meetupId --> name of our folder in the sq. brackets)\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n\n  console.log(meetupId);\n\n  //fetch data for a single meetup\n  return {\n    props: {\n      meetupData: {\n        image:\n          'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\n        id: meetupId,\n        title: 'First Meetup',\n        address: 'Some address 5, 12345 some city',\n        description: 'this is a first meetup!'\n      }\n    }\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}