{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/karenrogers/personal-projects/NextJS/nextjs-meetups/pages/[meetupId]/index.js\",\n    _this = this;\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nvar MeetupDetails = function MeetupDetails() {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\n    title: 'First Meetup',\n    address: 'Some address 5, 12345 some city',\n    description: 'this is a first meetup!'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, _this);\n}; //special function you need to export in a page comp if it's a dynamic page (id in the url for ex) and you're using getStaticProps. This is needed because since the page is pre-generated (during build, not when the user visits the page), next needs to know for which dynamic parameters (here is the id) this page needs to be pre-generated.\n\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/karenrogers/personal-projects/NextJS/nextjs-meetups/pages/[meetupId]/index.js"],"names":["MeetupDetail","MeetupDetails"],"mappings":";;;;;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EACH,wHAFJ;AAIE,IAAA,KAAK,EAAE,cAJT;AAKE,IAAA,OAAO,EAAE,iCALX;AAME,IAAA,WAAW,EAAE;AANf;AAAA;AAAA;AAAA;AAAA,WADF;AAUD,CAXD,C,CAaA;;;KAbMA,a;;AAwFN,eAAeA,aAAf","sourcesContent":["import MeetupDetail from '../../components/meetups/MeetupDetail';\nimport { MongoClient } from 'mongodb';\n\nconst MeetupDetails = () => {\n  return (\n    <MeetupDetail\n      image={\n        'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg'\n      }\n      title={'First Meetup'}\n      address={'Some address 5, 12345 some city'}\n      description={'this is a first meetup!'}\n    />\n  );\n};\n\n//special function you need to export in a page comp if it's a dynamic page (id in the url for ex) and you're using getStaticProps. This is needed because since the page is pre-generated (during build, not when the user visits the page), next needs to know for which dynamic parameters (here is the id) this page needs to be pre-generated.\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    'mongodb+srv://Karen:Antofagasta2200286@cluster0.yyz3a.mongodb.net/meetups?retryWrites=true&w=majority'\n  );\n\n  const dataBase = client.db();\n\n  const meetupsCollection = dataBase.collection('meetups');\n\n  //passing an empty {} as 1st arg to fetch all documents in the meetups [] and _id:1 to fetch all documents containing only the _id property\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n  return {\n    // fallback: false means we include all dynamic paths ourselves and if a user enters one that doesn't exist, the server wont try to generate a page to display but will show a 404 error\n    fallback: false,\n    //must have path key that's a [] ob objects\n    //[\n    //generating array of paths dynamically\n    paths: meetups.map((meetup) => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n    //include 1 {} per each version of this dynamic page\n    // {\n    //   params: {\n    //     //dynamic values here\n    //     meetupId: 'm1'\n    //   }\n    // },\n    // {\n    //   params: {\n    //     //dynamic values here\n    //     meetupId: 'm2'\n    //   }\n    // }\n    // ]\n  };\n}\n\n//after getStaticPaths, getStaticProps runs for every page we need to generate.\n//you can't use hooks inside getStaticProps, so instead of useRouter, use the context {} parameter to access the params key (built in) and the dynamic values encoded in the url (meetupId --> name of our folder in the sq. brackets)\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    'mongodb+srv://Karen:Antofagasta2200286@cluster0.yyz3a.mongodb.net/meetups?retryWrites=true&w=majority'\n  );\n\n  const dataBase = client.db();\n\n  const meetupsCollection = dataBase.collection('meetups');\n\n  //\n  const selectedMeetup = await meetupsCollection.findOne({ _id: meetupId });\n\n  client.close();\n\n  //fetch data for a single meetup\n  return {\n    props: {\n      meetupData: {\n        image:\n          'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\n        id: meetupId,\n        title: 'First Meetup',\n        address: 'Some address 5, 12345 some city',\n        description: 'this is a first meetup!'\n      }\n    }\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}