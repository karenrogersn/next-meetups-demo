{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/karenrogers/personal-projects/NextJS/nextjs-meetups/pages/[meetupId]/index.js\";\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport { prop } from 'dom7';\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description // image={\n    //   'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg'\n    // }\n    // title={'First Meetup'}\n    // address={'Some address 5, 12345 some city'}\n    // description={'this is a first meetup!'}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}; //special function you need to export in a page comp if it's a dynamic page (id in the url for ex) and you're using getStaticProps. This is needed because since the page is pre-generated (during build, not when the user visits the page), next needs to know for which dynamic parameters (here is the id) this page needs to be pre-generated.\n\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://Karen:Antofagasta2200286@cluster0.yyz3a.mongodb.net/meetups?retryWrites=true&w=majority');\n  const dataBase = client.db();\n  const meetupsCollection = dataBase.collection('meetups'); //passing an empty {} as 1st arg to fetch all documents in the meetups [] and _id:1 to fetch all documents containing only the _id property\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    // fallback: false means we include all dynamic paths ourselves and if a user enters one that doesn't exist, the server wont try to generate a page to display but will show a 404 error\n    fallback: false,\n    //must have path key that's a [] ob objects\n    //[\n    //generating array of paths dynamically\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) //include 1 {} per each version of this dynamic page\n    // {\n    //   params: {\n    //     //dynamic values here\n    //     meetupId: 'm1'\n    //   }\n    // },\n    // {\n    //   params: {\n    //     //dynamic values here\n    //     meetupId: 'm2'\n    //   }\n    // }\n    // ]\n\n  };\n} //after getStaticPaths, getStaticProps runs for every page we need to generate.\n//you can't use hooks inside getStaticProps, so instead of useRouter, use the context {} parameter to access the params key (built in) and the dynamic values encoded in the url (meetupId --> name of our folder in the sq. brackets)\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://Karen:Antofagasta2200286@cluster0.yyz3a.mongodb.net/meetups?retryWrites=true&w=majority');\n  const dataBase = client.db();\n  const meetupsCollection = dataBase.collection('meetups'); //\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close(); //fetch data for a single meetup\n\n  return {\n    props: {\n      meetupData: {} // {\n      //   image:\n      //     'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\n      //   id: meetupId,\n      //   title: 'First Meetup',\n      //   address: 'Some address 5, 12345 some city',\n      //   description: 'this is a first meetup!'\n      // }\n\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/karenrogers/personal-projects/NextJS/nextjs-meetups/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","prop","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","dataBase","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,SAASC,IAAT,QAAqB,MAArB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI,WAJhC,CAKE;AACA;AACA;AACA;AACA;AACA;;AAVF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAfD,C,CAiBA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,uGADmB,CAArB;AAIA,QAAMC,QAAQ,GAAGF,MAAM,CAACG,EAAP,EAAjB;AAEA,QAAMC,iBAAiB,GAAGF,QAAQ,CAACG,UAAT,CAAoB,SAApB,CAA1B,CAPqC,CASrC;;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAT,EAAAA,MAAM,CAACU,KAAP;AACA,SAAO;AACL;AACAC,IAAAA,QAAQ,EAAE,KAFL;AAGL;AACA;AACA;AACAC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AADJ;AADsB,KAAb,CAAZ,CANF,CAWL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAxBK,GAAP;AA0BD,C,CAED;AACA;;AACA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMhB,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,uGADmB,CAArB;AAIA,QAAMC,QAAQ,GAAGF,MAAM,CAACG,EAAP,EAAjB;AAEA,QAAMC,iBAAiB,GAAGF,QAAQ,CAACG,UAAT,CAAoB,SAApB,CAA1B,CAT4C,CAW5C;;AACA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAAEb,IAAAA,GAAG,EAAElB,QAAQ,CAAC0B,QAAD;AAAf,GAA1B,CAA7B;AAEAhB,EAAAA,MAAM,CAACU,KAAP,GAd4C,CAgB5C;;AACA,SAAO;AACLjB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE,EADP,CAIL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAXK;AADF,GAAP;AAeD;AAED,eAAeF,aAAf","sourcesContent":["import MeetupDetail from '../../components/meetups/MeetupDetail';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport { prop } from 'dom7';\n\nconst MeetupDetails = (props) => {\n  return (\n    <MeetupDetail\n      image={props.meetupData.image}\n      title={props.meetupData.title}\n      address={props.meetupData.address}\n      description={props.meetupData.description}\n      // image={\n      //   'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg'\n      // }\n      // title={'First Meetup'}\n      // address={'Some address 5, 12345 some city'}\n      // description={'this is a first meetup!'}\n    />\n  );\n};\n\n//special function you need to export in a page comp if it's a dynamic page (id in the url for ex) and you're using getStaticProps. This is needed because since the page is pre-generated (during build, not when the user visits the page), next needs to know for which dynamic parameters (here is the id) this page needs to be pre-generated.\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    'mongodb+srv://Karen:Antofagasta2200286@cluster0.yyz3a.mongodb.net/meetups?retryWrites=true&w=majority'\n  );\n\n  const dataBase = client.db();\n\n  const meetupsCollection = dataBase.collection('meetups');\n\n  //passing an empty {} as 1st arg to fetch all documents in the meetups [] and _id:1 to fetch all documents containing only the _id property\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n  return {\n    // fallback: false means we include all dynamic paths ourselves and if a user enters one that doesn't exist, the server wont try to generate a page to display but will show a 404 error\n    fallback: false,\n    //must have path key that's a [] ob objects\n    //[\n    //generating array of paths dynamically\n    paths: meetups.map((meetup) => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n    //include 1 {} per each version of this dynamic page\n    // {\n    //   params: {\n    //     //dynamic values here\n    //     meetupId: 'm1'\n    //   }\n    // },\n    // {\n    //   params: {\n    //     //dynamic values here\n    //     meetupId: 'm2'\n    //   }\n    // }\n    // ]\n  };\n}\n\n//after getStaticPaths, getStaticProps runs for every page we need to generate.\n//you can't use hooks inside getStaticProps, so instead of useRouter, use the context {} parameter to access the params key (built in) and the dynamic values encoded in the url (meetupId --> name of our folder in the sq. brackets)\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    'mongodb+srv://Karen:Antofagasta2200286@cluster0.yyz3a.mongodb.net/meetups?retryWrites=true&w=majority'\n  );\n\n  const dataBase = client.db();\n\n  const meetupsCollection = dataBase.collection('meetups');\n\n  //\n  const selectedMeetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) });\n\n  client.close();\n\n  //fetch data for a single meetup\n  return {\n    props: {\n      meetupData: {\n\n      }\n      // {\n      //   image:\n      //     'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\n      //   id: meetupId,\n      //   title: 'First Meetup',\n      //   address: 'Some address 5, 12345 some city',\n      //   description: 'this is a first meetup!'\n      // }\n    }\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}